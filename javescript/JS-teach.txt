//屬性＝屬性質
掃地機器人.方向=0度
掃地機器人.電量＝100%
//方法（）
掃地機器人.充電＝function({
	掃地機器人.充電到100%
}
掃地機器人.轉彎＝function(??){
	掃地機器人.方向＝掃地機器人.方向+??度
}
//事件
掃地機器人.設定事件（“撞牆,掃地機器人.轉彎(30))
掃地機器人.設定事件（“低電量,掃地機器人.充電())

---------------------------------------------------------------------------------

物件導向程式語言

//屬性
人.膚色="黃"
人.身高="160"
//方法
人.吃("三明治")
人.玩("唱歌")
//事件
人.設定事件("肚子餓""人.吃("abc")")

---------------------------------------------------------------------------------

輸出{
	window.alert()
	console.log()
	document.write()

}	
	<div id="mydiv"></div>
	const thediv = document.getElenentById("mydiv")
	//innerText textContent innerHtml
	document.getElenentById("mydiv").textContent = "<h2>abcd</h2>"
	document.getElenentById("mydiv").innerHtml = "<h2>abcd</h2>"
	thediv.textContent = "<h2>abcd</h2>"

---------------------------------------------------------------------------------

輸入{
	window.prompt()
}


---------------------------------------------------------------------------------

變數 = 可改變 (數字)
常數 = 不可改變 (ex:pi)

宣告常數 => const (常用大寫表示)
宣告變數 => let
舊的宣告變數 => var (變數宣告會移到程式碼的最上面，指定執會在原程式碼的位置)

let price = undefined; => 系統做的
let price = null; => 工程師會這樣寫

---------------------------------------------------------------------------------

Statements	（敘述句、陳述式）	Javascript的程式是由一堆statement所組合而成的，
每一段statements的結束都會加個 ';'
ex:
	if () {}
	let a = 'abc'
	function f1 (){}


Expressions （表達式、運算式）	是一段會產生結果的javascript程式碼
ex:
	'abc';
	3+4
	islogin ? 'true' : ' false'
	{Expressions}

---------------------------------------------------------------------------------

變數：廣域變數（全域變數） 區域變數

var ＝> 在function之外就是廣域變數
let => 只要在{}李就會變區域變數

w